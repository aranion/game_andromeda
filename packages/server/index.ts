import dotenv from 'dotenv';
// import cors from 'cors';
dotenv.config();

import express, { Request, Response } from 'express';
import { createClientAndConnect } from './db';
import fs from 'fs';
import path from 'path';
import { createServer as createViteServer } from 'vite';
//@ts-ignore
import { render } from './ssr/entry-server.cjs';

async function createServer() {
  const port = Number(process.env.SERVER_PORT) || 3001;
  const app = express();
  createClientAndConnect();
  // –°–æ–∑–¥–∞—ë–º Vite —Å–µ—Ä–≤–µ—Ä –≤ middleware —Ä–µ–∂–∏–º–µ. –≠—Ç–æ –æ—Ç–∫–ª—é—á–∏—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π HTML Vite'–∞
  // serving logic and let the parent server take control.
  // –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Vite's own HTML serving logic (–∏—Å–ø–æ–ª—å–∑—É—è Vite –∫–∞–∫
  // a development middleware), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ 'html'.
  const vite = await createViteServer({
    server: { middlewareMode: 'ssr' },
  });
  // –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ vite's connect instance –∫–∞–∫ middleware
  app.use(vite.middlewares);

  app.use('*', async (req: Request, res: Response) => {
    const url = req.originalUrl;

    try {
      // 1. Read index.html
      let template = fs.readFileSync(
        path.resolve(__dirname, './client/index.html'),
        'utf-8'
      );
      // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º Vite HTML —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏. –≠—Ç–æ –∑–∞–∏–Ω–∂–µ–∫—Ç–∏—Ç Vite HMR client, –∏
      //    —Ç–∞–∫–∂–µ –ø—Ä–∏–º–µ–Ω–∏—Ç HTML —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ Vite –ø–ª–∞–≥–∏–Ω–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, global preambles
      //    –∏–∑ @vitejs/plugin-react-refresh
      template = await vite.transformIndexHtml(url, template);

      // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º the server entry. vite.ssrLoadModule –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç
      //    –≤–∞—à ESM –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Node.js! –ó–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω –Ω–∏–∫–∞–∫–æ–π –±–∞–Ω–¥–ª–µ—Ä,
      //    –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø–æ—Ö–æ–∂—É—é –Ω–∞ HMR.
      const { render } = await require(path.resolve(
        __dirname,
        './ssr/entry-server.cjs'
      ));

      // 4. render the app HTML. –≠—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç entry-server.js's exported `render`
      //    function calls appropriate framework SSR APIs,
      //    e.g. ReactDOMServer.renderToString()
      // const appHtml = await render(url);

      // 5. –ò–Ω–∂–µ–∫—Ç–∏–º the app-rendered HTML –≤ —à–∞–±–ª–æ–Ω.
      const html = template.replace('<!--ssr-outlet-->', render);

      // 6. –ü–æ—Å—ã–ª–∞–µ–º the rendered HTML –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.
      res.status(200).set({ 'Content-Type': 'text/html' }).end(html);
    } catch (e: any) {
      // –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–∑–≤–æ–ª—è–µ–º Vite fix the stracktrace so it maps back to
      // your actual source code.
      vite.ssrFixStacktrace(e);
      console.error(e);
      res.status(500).end(e.message);
    }
  });

  app.use(express.static(path.resolve(__dirname, './client')));

  app.listen(port);
}

createServer();

// const app = express();
// app.use(cors());
// const port = Number(process.env.SERVER_PORT) || 3001;

// createClientAndConnect();

// app.get('/', (_, res) => {
//   res.json('üëã Howdy from the server :)');
//   res.setHeader('Content-Type', 'text/html');
//   res.setHeader('Cache-Control', 's-max-age=1, stale-while-revalidate');
//   res.end('Hello! Go to item:');
// });

// app.get('/api/item/:slug', (req, res) => {
//   const { slug } = req.params;
//   res.end(`Item: ${slug}`);
// });
// //@ts-ignore
// app.get('*', (req, res) => {
//   res.json('üëã ...... :)');
// });

// app.listen(port, () => {
//   console.log(`  ‚ûú üé∏ Server is listening on port: ${port}`);
// });

// module.exports = app;
